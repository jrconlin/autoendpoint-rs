use std::error::Error;

use serde_derive::Deserialize;

// This should be autogenerated.
const USAGE: &str = "
Handle incoming REST like autopush requests

Usage: autopush-rs [options]

-h --help   Show help

optional arguments:
  -h, --help            show this help message and exit
  --config <CONFIG_FILE>
                        Endpoint node configuration file path
  -p <PORT> --port <PORT>  Public HTTP Endpoint Port [env var: PORT]
  --no_cors             Disallow CORS PUTs for update. [env var: ALLOW_CORS]
  --auth_key <AUTH_KEY>   Bearer Token source key [env var: AUTH_KEY]
  --client_certs <CLIENT_CERTS>
                        Allowed TLS client certificates [env var:
                        CLIENT_CERTS]
  --proxy_protocol_port <PROXY_PROTOCOL_PORT>
                        Enable a secondary Endpoint Port with HAProxy Proxy
                        Protocol handling [env var: PROXY_PROTOCOL_PORT]
  --config-shared <CONFIG_FILE>
                        Common configuration file path
  --debug               Debug Info. [env var: DEBUG]
  --log_level <LOG_LEVEL>
                        Log level to log [env var: LOG_LEVEL]
  --log_output <LOG_OUTPUT>
                        Log output, stdout or filename [env var: LOG_OUTPUT]
  --firehose_stream_name <FIREHOSE_STREAM_NAME>
                        Firehose Delivery Stream Name [env var: STREAM_NAME]
  --crypto_key <CRYPTO_KEY>
                        Crypto key for tokens [env var: CRYPTO_KEY]
  --key_hash <KEY_HASH>   Key to hash IDs for storage [env var: KEY_HASH]
  --datadog_api_key <DATADOG_API_KEY>
                        DataDog API Key [env var: DATADOG_API_KEY]
  --datadog_app_key <DATADOG_APP_KEY>
                        DataDog App Key [env var: DATADOG_APP_KEY]
  --datadog_flush_interval <DATADOG_FLUSH_INTERVAL>
                        DataDog Flush Interval [env var:
                        DATADOG_FLUSH_INTERVAL]
  --hostname <HOSTNAME>   Hostname to announce under [env var: LOCAL_HOSTNAME]
  --resolve_hostname    Resolve the announced hostname [env var:
                        RESOLVE_HOSTNAME]
  --statsd_host <STATSD_HOST>
                        Statsd Host [env var: STATSD_HOST]
  --statsd_port <STATSD_PORT>
                        Statsd Port [env var: STATSD_PORT]
  --ssl_key <SSL_KEY>     SSL Key path [env var: SSL_KEY]
  --ssl_cert <SSL_CERT>   SSL Cert path [env var: SSL_CERT]
  --ssl_dh_param <SSL_DH_PARAM>
                        SSL DH Param file (openssl dhparam 1024) [env var:
                        SSL_DH_PARAM]
  --router_tablename <ROUTER_TABLENAME>
                        DynamoDB Router Tablename [env var: ROUTER_TABLENAME]
  --message_tablename <MESSAGE_TABLENAME>
                        DynamoDB Message Tablename [env var:
                        MESSAGE_TABLENAME]
  --message_read_throughput <MESSAGE_READ_THROUGHPUT>
                        DynamoDB message read throughput [env var:
                        MESSAGE_READ_THROUGHPUT]
  --message_write_throughput <MESSAGE_WRITE_THROUGHPUT>
                        DynamoDB message write throughput [env var:
                        MESSAGE_WRITE_THROUGHPUT]
  --router_read_throughput <ROUTER_READ_THROUGHPUT>
                        DynamoDB router read throughput [env var:
                        ROUTER_READ_THROUGHPUT]
  --router_write_throughput <ROUTER_WRITE_THROUGHPUT>
                        DynamoDB router write throughput [env var:
                        ROUTER_WRITE_THROUGHPUT]
  --connection_timeout <CONNECTION_TIMEOUT>
                        Seconds to wait for connection timeout [env var:
                        CONNECTION_TIMEOUT]
  --max_data <MAX_DATA>   Max data segment length in bytes [env var: MAX_DATA]
  --env <ENV>             The environment autopush is running under [env var:
                        AUTOPUSH_ENV]
  --endpoint_scheme <ENDPOINT_SCHEME>
                        HTTP Endpoint Scheme [env var: ENDPOINT_SCHEME]
  --endpoint_hostname <ENDPOINT_HOSTNAME>
                        HTTP Endpoint Hostname [env var: ENDPOINT_HOSTNAME]
  -e <ENDPOINT_PORT> --endpoint_port <ENDPOINT_PORT>
                        HTTP Endpoint Port [env var: ENDPOINT_PORT]
  --human_logs          Enable human readable logs [env var: HUMAN_LOGS]
  --no_aws              Skip AWS meta information checks [env var: NO_AWS]
  --msg_limit <MSG_LIMIT>
                        Max limit for messages per uaid before reset [env var:
                        MSG_LIMIT]
  --memusage_port <MEMUSAGE_PORT>
                        Enable the debug _memusage API on Port [env var:
                        MEMUSAGE_PORT]
  --use_cryptography    Use the cryptography library vs. JOSE [env var:
                        USE_CRYPTOGRAPHY]
  --sts_max_age <STS_MAX_AGE>
                        Max Strict Transport Age in seconds [env var:
                        STS_MAX_AGE]
  --_no_sslcontext_cache
                        Don't cache ssl.wrap_socket's SSLContexts [env var:
                        _NO_SSLCONTEXT_CACHE]
  --aws_ddb_endpoint <AWS_DDB_ENDPOINT>
                        AWS DynamoDB endpoint override [env var:
                        AWS_LOCAL_DYNAMODB]
  --no_table_rotation   Disallow monthly message table rotation [env var:
                        NO_TABLE_ROTATION]
  --gcm_enabled         Enable GCM Bridge [env var: GCM_ENABLED]
  --gcm_ttl <GCM_TTL>     GCM Router: Time to Live [env var: GCM_TTL]
  --gcm_dryrun          GCM Router: Dry run (no message sent) [env var:
                        GCM_DRYRUN]
  --gcm_collapsekey <GCM_COLLAPSEKEY>
                        GCM Router: string to collapse messages [env var:
                        GCM_COLLAPSEKEY]
  --senderid_list <SENDERID_LIST>
                        GCM SenderIDs/auth keys [env var: SENDERID_LIST]
  --gcm_endpoint <GCM_ENDPOINT>
                        GCM Router: endpoint to use [env var: GCM_ENDPOINT]
  --fcm_enabled         Enable FCM Bridge [env var: FCM_ENABLED]
  --fcm_ttl <FCM_TTL>     FCM Router: Time to Live [env var: FCM_TTL]
  --fcm_dryrun          FCM Router: Dry run (no message sent) [env var:
                        FCM_DRYRUN]
  --fcm_collapsekey <FCM_COLLAPSEKEY>
                        FCM Router: string to collapse messages [env var:
                        FCM_COLLAPSEKEY]
  --fcm_auth <FCM_AUTH>   Auth Key for FCM [env var: FCM_AUTH]
  --fcm_senderid <FCM_SENDERID>
                        SenderID for FCM [env var: FCM_SENDERID]
  --fcm_project_id <FCM_PROJECT_ID>
                        FCM Project identifier [env var: FCM_PROJECT_ID]
  --fcm_service_cred_path <FCM_SERVICE_CRED_PATH>
                        Path to FCM Service Credentials [env var:
                        FCM_SERVICE_CRED_PATH]
  --apns_creds <APNS_CREDS>
                        JSON dictionary of APNS settings [env var: APNS_CREDS]
  --adm_creds <ADM_CREDS>
                        JSON dictionary of Amazon Device Message credentials
                        [env var: ADM_CREDS]
";

#[derive(Debug, Deserialize)]
struct Args {
    pub flag_config: Option<String>,
}

fn main() -> Result<(), Box<dyn Error>> {
    env_logger::init();

    println!("Hello, world!");
    Ok(())
}
